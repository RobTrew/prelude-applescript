{
  "title": "findIndex",
  "cells": [
    {
      "type": "code",
      "language": "applescript",
      "data": "-- Takes a predicate function and a list and\n-- returns Just( the 1-based index of the first\n-- element ) in the list satisfying the predicate\n-- or Nothing if there is no such element."
    },
    {
      "type": "code",
      "language": "applescript",
      "data": "-- findIndex(isSpace, \"hello world\")\n--> {type:\"Maybe\", Nothing:false, Just:6}\n\n-- findIndex(even, [3, 5, 7, 8, 9])\n--> {type:\"Maybe\", Nothing:false, Just:4}\n\n-- findIndex(isUpper, \"all lower case\")\n--> {type:\"Maybe\", Nothing:true}"
    },
    {
      "type": "code",
      "language": "applescript",
      "data": "-- findIndex :: (a -> Bool) -> [a] -> Maybe Int\non findIndex(p, xs)\n    tell mReturn(p)\n        set lng to length of xs\n        repeat with i from 1 to lng\n            if |Î»|(item i of xs) then return Just(i)\n        end repeat\n        return Nothing()\n    end tell\nend findIndex"
    }
  ]
}